import { fromEvent, of, from } from 'rxjs';
import { fromFetch } from 'rxjs/fetch';
import { switchMap, catchError } from 'rxjs/operators';

const o = of(5) // Promise.resolve(5)

//const ghInput = document.querySelector('input');
//const ghInputObservable = fromEvent(ghInput, 'input');
const oselectObservableElement = (id) => document.getElementById(id);
const makeObservableBox = (watchIt) => fromEvent(watchIt, 'input');

const githubRequestUri = `https://api.github.com/search/repositories?q=`
const gitlabRequestUri = `https://gitlab.com/api/v4/projects?search=`;

const makeSearchRequest = (uri) => (request)  =>`${uri}${request}`;

const githubRequest = makeSearchRequest(githubRequestUri);
const gitlabRequest = makeSearchRequest(gitlabRequestUri);

/*
const observableResponse = 
  from(fetch(uriOne))
  .pipe(switchMap(res => res.json()))
*/
/*
ghInputObservable.pipe(switchMap((event:KeyboardEvent) => {
  return fetch(
    `https://api.github.com/search/repositories?q=${(event.target as HTMLInputElement).value}`
  ).then(res => res.json())
//})).subscribe(res => console.log(res.total_count));
})).subscribe(res => console.log("love"));
*/
/*
glInputObservable.pipe(switchMap((event:KeyboardEvent) => {
  return fetch(
    `https://gitlab.com/api/v4/projects?search=${(event.target as HTMLInputElement).value}`
  ).then(res => res.json())

//})).subscribe(res => console.log(res.total_count));
//})).subscribe(res => console.log("butterfly"));
})).subscribe(res => console.log(res));

//const data$ = fromFetch('https://api.github.com/users?per_page=5').pipe(
const data$ = (uri) => fromFetch(uri).pipe(
 switchMap(response => {
   return (
     response.ok
       ? response.json()
       : of({ error: true, message: `Error ${response.status}` })
   )
 }),
 catchError(err => {
   console.error(err);
   return of({ error: true, message: err.message })
 })
);

data$(uriOne).subscribe({
 next: result => console.log("From github" + JSON.stringify(result)),
 complete: () => console.log('done')
});
*/
/*
o.subscribe({
  next: (value: any) => console.log('Next:', value),
  complete: () => console.log('Complete!'),
  error: (error) => console.log('Error!', error)
})
*/
